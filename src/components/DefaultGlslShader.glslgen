vertex
out vec4 gl_Position()
{
@src
	gl_Position = vec4(0, 0, 0, 0);
@endsrc
}

vertex
out vec4 gl_Position(attr0 vec3 aVerPos)
{
@src
	gl_Position = vec4(aVerPos, 1.f);
@endsrc
}

vertex
out vec4 gl_Position(attr0 vec3 aVerPos, mat4 uModel, mat4 uView, mat4 uProjection)
{
@src
	gl_Position = uProjection * uView * uModel * vec4(aVerPos, 1.f);
@endsrc
}

fragment
out vec4 fragColor()
{
@src
	fragColor = vec4(0, 0, 0, 0);
@endsrc
}

fragment
out vec4 fragColor(vec4 uColor)
{
@src
	fragColor = uColor;
@endsrc
}

vertex
vec2 texCoord(attr1 vec2 aTexCoord)
{
@src
	texCoord = aTexCoord;
@endsrc
}

fragment
out vec4 fragColor(sampler2D uScreenTexture, vec2 texCoord)
{
@src
	fragColor = texture(uScreenTexture, texCoord);
@endsrc
}


fragment
vec4 diffuseColor(vec4 uDiffuseColor)
{
@src
	diffuseColor = uDiffuseColor;
@endsrc
}

fragment
vec4 diffuseColor(sampler2D uDiffuseTexture, attr1 vec2 aTextureCoord)
{
@src
	diffuseColor = texture(uDiffuseTexture, aTextureCoord);
@endsrc
}

fragment
out vec4 fragColor(vec4 diffuseColor)
{
@src
	fragColor = diffuseColor;
@endsrc
}

fragment
float ambientTerm()
{
@src
	ambientTerm = 0.3;
@endsrc
}

fragment
vec3 gsNormal(attr2 vec3 aNormal, mat4 uModel)
{
@src
	mat3 rotation = mat3(uModel);
	gsNormal = normalize(rotation * aNormal);
@endsrc
}

fragment
vec3 lightDirection(vec3 uLightDirection)
{
@src
	lightDirection = uLightDirection;
@endsrc
}

fragment
vec3 lightColor()
{
@src
	lightColor = vec3(1, 1, 1);
@endsrc
}

fragment
float diffuseTerm(vec3 gsNormal, vec3 lightDirection, float ambientTerm)
{
@src
	vec3 reflectionDir = normalize(lightDirection - 2 * gsNormal * dot(lightDirection, gsNormal));
	diffuseTerm = max(0, dot(reflectionDir, gsNormal));
@endsrc
}

fragment
float specularTerm(vec3 lightDirection, vec3 uViewDirection, vec3 gsNormal, float uSpecularity)
{
@src
	//half vector
	vec3 hv = normalize(normalize(-lightDirection) + normalize(-uViewDirection));
	specularTerm = max(0, pow(dot(gsNormal, hv), uSpecularity));
@endsrc
}

fragment
vec4 blinnPhongColor(vec4 diffuseColor, vec3 lightColor,
					float ambientTerm, float diffuseTerm, float specularTerm)
{
@src
	vec3 lighting = vec3(lightColor) * clamp(ambientTerm + diffuseTerm * (1 - ambientTerm) + specularTerm, 0.f, 1.f);
	blinnPhongColor = diffuseColor * vec4(lighting, 1.f);
@endsrc
}

fragment prio=1
out vec4 fragColor( vec4 blinnPhongColor)
{
@src
	fragColor = blinnPhongColor;
@endsrc
}

fragment prio=1
out vec4 fragColor( vec3 gsNormal, bool fDrawNormals)
{
@src
	fragColor = vec4((gsNormal + vec3(1,1,1)) / 2, 1.f);
@endsrc
}

fragment prio=1
out vec4 fragColor(attr3 vec3 aTangent, bool fDrawTangents)
{
@src
	fragColor = vec4((aTangent + vec3(1, 1, 1)) / 2, 1.f);
@endsrc
}

fragment prio=1
out vec4 fragColor(attr3 vec3 aBitangent, bool fDrawBitangent)
{
@src
	fragColor = vec4((aBitangent + vec3(1, 1, 1)) / 2, 1.f);
@endsrc
}
