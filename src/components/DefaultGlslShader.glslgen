vertex
out vec4 gl_Position()
{
@src
	gl_Position = vec4(0, 0, 0, 0);
@endsrc
}

vertex
out vec4 gl_Position(attr0 vec3 aVerPos)
{
@src
	gl_Position = vec4(aVerPos, 1.f);
@endsrc
}

vertex
out vec4 gl_Position(attr0 vec3 aVerPos, mat4 uModel, mat4 uView, mat4 uProjection)
{
@src
	gl_Position = uProjection * uView * uModel * vec4(aVerPos, 1.f);
@endsrc
}

fragment
out vec4 fragColor()
{
@src
	fragColor = vec4(0, 0, 0, 0);
@endsrc
}

fragment
out vec4 fragColor(vec4 uColor)
{
@src
	fragColor = uColor;
@endsrc
}

vertex
vec2 texCoord(attr1 vec2 aTexCoord)
{
@src
	texCoord = aTexCoord;
@endsrc
}

fragment
out vec4 fragColor(sampler2D uScreenTexture, vec2 texCoord)
{
@src
	fragColor = texture(uScreenTexture, texCoord);
@endsrc
}


fragment
vec4 ambientColor(vec4 uAmbiantColor)
{
@src
	ambientColor = uAmbiantColor;
@endsrc
}

fragment
vec4 ambientColor(sampler2D uAmbiantTexture, attr1 vec2 aTextureCoord)
{
@src
	ambientColor = texture(uAmbiantTexture, aTextureCoord);
@endsrc
}

fragment
out vec4 fragColor(vec4 ambientColor)
{
@src
	fragColor = ambientColor;
@endsrc
}

fragment
float ambientTerm()
{
@src
	ambientTerm = 0.1;
@endsrc
}

fragment
vec3 diffuseColor(vec4 ambientColor)
{
@src
	diffuseColor = vec3(ambientColor);
@endsrc
}

fragment
vec3 gsNormal(attr2 vec3 aNormal, mat4 uModel)
{
@src
	mat3 rotation = mat3(uModel);
	gsNormal = normalize(rotation * aNormal);
@endsrc
}

fragment
float diffuseTerm(vec3 gsNormal, vec3 uLightDirection, float ambientTerm)
{
@src
	vec3 reflectionDir = normalize(uLightDirection + 2 * gsNormal);
	diffuseTerm = max(0, dot(reflectionDir, gsNormal));
@endsrc
}

fragment
vec3 specularColor()
{
@src
	specularColor = vec3(1.f, 1.f, 1.f);
@endsrc
}

fragment
float specularTerm(vec3 uLightDirection, vec3 uViewDirection, vec3 gsNormal, float uSpecularity)
{
@src
	//half vector
	vec3 hv = normalize(normalize(-uLightDirection) + normalize(-uViewDirection));
	specularTerm = pow(dot(gsNormal, hv), uSpecularity);
@endsrc
}

fragment
vec3 blinnPhongColor(	vec4 ambientColor,		float ambientTerm,
						vec3 diffuseColor,		float diffuseTerm,
						vec3 specularColor,		float specularTerm)
{
@src
	blinnPhongColor = clamp(vec3(ambientColor) * ambientTerm
							 + diffuseColor * diffuseTerm * (1 - ambientTerm)
							/*+ specularColor * specularTerm*/,
						vec3(0.f, 0.f, 0.f),
						vec3(1.f, 1.f, 1.f));
@endsrc
}

fragment prio=1
out vec4 fragColor( vec3 blinnPhongColor)
{
@src
	fragColor = vec4(blinnPhongColor, 1.f);
@endsrc
}
